"""
Adapter for CIViC Assertions
"""

from . import CivicBaseAdapter
import os
import csv
import logging

class CivicAssertionAdapter(CivicBaseAdapter):
    """Adapter for CIViC Assertions"""
    
    def __init__(self, data_dir=None):
        """Initialize the adapter"""
        super().__init__(data_dir)
        self.logger = logging.getLogger(__name__)
        
        # File paths
        self.assertions_file = os.path.join(self.data_dir, "01-Jul-2025-AssertionSummaries.tsv")
        
        # Data structures
        self.assertions = {}
    
    def parse_data(self):
        """Parse assertion data from TSV file"""
        self.logger.info("Parsing CIViC assertion data from TSV")
        
        # Check if file exists
        if not os.path.exists(self.assertions_file):
            self.logger.warning(f"Assertions file not found: {self.assertions_file}")
            return
        
        # Parse assertions
        with open(self.assertions_file, "r", encoding='utf-8') as f:
            reader = csv.DictReader(f, delimiter='\t')
            for row in reader:
                assertion_id = f"civic_assertion:{row['assertion_id']}"
                
                # Create assertion
                self.assertions[assertion_id] = {
                    "name": f"Assertion {row['assertion_id']}",
                    "molecular_profile": row.get("molecular_profile", ""),
                    "assertion_type": row.get("assertion_type", ""),
                    "assertion_direction": row.get("assertion_direction", ""),
                    "significance": row.get("significance", ""),
                    "amp_category": row.get("amp_category", ""),
                    "nccn_guideline": row.get("nccn_guideline", ""),
                    "regulatory_approval": row.get("regulatory_approval", ""),
                    "fda_companion_test": row.get("fda_companion_test", ""),
                    "description": row.get("assertion_description", ""),
                    "summary": row.get("assertion_summary", ""),
                    "disease": row.get("disease", ""),
                    "doid": row.get("doid", ""),
                    "therapies": row.get("therapies", ""),
                    "evidence_item_ids": row.get("evidence_item_ids", ""),
                    "source": "CIViC",
                    "data_source": "CIViC"
                }
        
        self.logger.info(f"Parsed {len(self.assertions)} assertions")
    
    def get_nodes(self):
        """Get assertion nodes for the knowledge graph"""
        # Generate assertion nodes
        for assertion_id, assertion in self.assertions.items():
            yield (
                assertion_id,
                "assertion",
                {
                    "name": assertion.get("name", ""),
                    "id": assertion_id,
                    "molecular_profile": assertion.get("molecular_profile", ""),
                    "assertion_type": assertion.get("assertion_type", ""),
                    "assertion_direction": assertion.get("assertion_direction", ""),
                    "significance": assertion.get("significance", ""),
                    "amp_category": assertion.get("amp_category", ""),
                    "nccn_guideline": assertion.get("nccn_guideline", ""),
                    "regulatory_approval": assertion.get("regulatory_approval", ""),
                    "fda_companion_test": assertion.get("fda_companion_test", ""),
                    "description": assertion.get("description", ""),
                    "summary": assertion.get("summary", ""),
                    "disease": assertion.get("disease", ""),
                    "doid": assertion.get("doid", ""),
                    "therapies": assertion.get("therapies", ""),
                    "evidence_item_ids": assertion.get("evidence_item_ids", ""),
                    "source": assertion.get("source", "CIViC"),
                    "data_source": assertion.get("data_source", "CIViC")
                }
            )
    
    def get_edges(self):
        """Get edges for the knowledge graph"""
        # No edges are generated by this adapter
        return []
