"""
Adapter for CIViC Assertions
"""

from . import CivicBaseAdapter
import os
import json
import logging

class CivicAssertionAdapter(CivicBaseAdapter):
    """Adapter for CIViC Assertions"""
    
    def __init__(self, data_dir=None):
        """Initialize the adapter"""
        super().__init__(data_dir)
        self.logger = logging.getLogger(__name__)
        
        # File paths
        self.assertions_file = os.path.join(self.data_dir, "assertions.json")
        
        # Data structures
        self.assertions = {}
    
    def parse_data(self):
        """Parse assertion data from file"""
        self.logger.info("Parsing CIViC assertion data")
        
        # Check if file exists
        if not os.path.exists(self.assertions_file):
            self.logger.warning(f"Assertions file not found: {self.assertions_file}")
            return
        
        # Parse assertions
        with open(self.assertions_file, "r") as f:
            assertions_data = json.load(f)
            
            for assertion in assertions_data["records"]:
                assertion_id = f"civic_assertion:{assertion['id']}"
                
                # Extract disease
                if assertion.get("disease"):
                    disease_name = assertion["disease"].get("name", "")
                    doid = assertion["disease"].get("doid", "")
                else:
                    disease_name = ""
                    doid = ""
                
                # Extract therapies
                therapy_names = []
                if assertion.get("therapies"):
                    for therapy in assertion["therapies"]:
                        therapy_names.append(therapy.get("name", ""))
                
                # Create assertion
                self.assertions[assertion_id] = {
                    "name": f"Assertion {assertion['id']}",
                    "assertion_type": assertion.get("assertion_type", ""),
                    "assertion_direction": assertion.get("assertion_direction", ""),
                    "clinical_significance": assertion.get("clinical_significance", ""),
                    "amp_category": assertion.get("amp_level", ""),
                    "description": assertion.get("description", ""),
                    "summary": assertion.get("summary", ""),
                    "disease": disease_name,
                    "doid": doid,
                    "therapies": "|".join(therapy_names),
                    "source": "CIViC",
                    "data_source": "CIViC"
                }
        
        self.logger.info(f"Parsed {len(self.assertions)} assertions")
    
    def get_nodes(self):
        """Get assertion nodes for the knowledge graph"""
        # Generate assertion nodes
        for assertion_id, assertion in self.assertions.items():
            yield (
                assertion_id,
                "assertion",
                {
                    "name": assertion.get("name", ""),
                    "id": assertion_id,
                    "assertion_type": assertion.get("assertion_type", ""),
                    "assertion_direction": assertion.get("assertion_direction", ""),
                    "clinical_significance": assertion.get("clinical_significance", ""),
                    "amp_category": assertion.get("amp_category", ""),
                    "description": assertion.get("description", ""),
                    "summary": assertion.get("summary", ""),
                    "disease": assertion.get("disease", ""),
                    "doid": assertion.get("doid", ""),
                    "therapies": assertion.get("therapies", ""),
                    "source": assertion.get("source", "CIViC"),
                    "data_source": assertion.get("data_source", "CIViC")
                }
            )
    
    def get_edges(self):
        """Get edges for the knowledge graph"""
        # No edges are generated by this adapter
        return []
